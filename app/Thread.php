<?php

namespace App;

use App\Observers\ThreadObserver;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Thread extends Model
{


    protected $guarded = [];
    protected $with =['user'];
    use SoftDeletes;



    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::observe(ThreadObserver::class);
    }


    public function path ()

    {
        return '/threads/' . $this->channel->name. '/'.$this->id;
    }

    public function channel(){


        return $this->belongsTo('App\Channel', 'channel_id');

    }

    public function replies ()

    {
        return $this->hasMany('App\Reply', 'thread_id');
    }

   //The user who post the thread
    public function user ()

    {
        return $this->belongsTo('App\User', 'user_id');
    }

    public function addReply ($reply)

    {
        $this->replies()->create($reply);
    }

    public function subscribe ($userId = null)

    {

        $this->subscriptions()->create([

            'user_id' => $userId ?: auth()->id()
        ]);

    }

    public function unsubscribe ($userId = null)

    {

        $this->subscriptions()
            ->where('user_id',$userId ?: auth()->id())
            ->delete();

    }

    public function subscriptions ()

    {
        $this->hasMany(ThreadSubscription::class, 'thread_id');
    }



}
